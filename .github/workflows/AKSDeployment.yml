# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# GitHub recommends pinning actions to a commit SHA.
# To get a newer version, you will need to update the SHA.
# You can also reference a tag or branch, but the action may change without warning.

name: Build and deploy to Azure Kubernetes Service

env:
  AZURE_CONTAINER_REGISTRY: manuacrtest # set this to the name of your container registry
  PROJECT_NAME: kubernetesapp              # set this to your project's name
  RESOURCE_GROUP: manu-acr-rg         # set this to the resource group containing your AKS cluster
  CLUSTER_NAME: manu-aks-dev              # set this to the name of your AKS cluster
  # If you bake using helm:
  #DEPLOYMENT_MANIFEST_PATH: "your-deployment-manifest-path"
  CHART_PATH: deployment/Manifests/sherpanyChart                   # set this to the path to your helm file
  CHART_OVERRIDE_PATH: deployment/Manifests/sherpanyChart/templates     # set this to an array of override file paths
  AKS_RESOURCE_GROUP: aks-test-rg
  ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
  ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
  ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  TF_VERSION: 1.5.7

on: [push]

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
    build:
        runs-on: ubuntu-latest
        permissions:
          contents: read
          id-token: write
        outputs:
          iacModified: ${{ steps.filter.outputs.workflows }}
        steps:
        - uses: actions/checkout@v4
        - uses: dorny/paths-filter@v3
          id: filter
          with:
            filters: |
              workflows:
                - 'deployment/IaC/**'
        - name: Azure Login
          uses: azure/login@v1.4.6
          with:
            creds: '${{ secrets.AZURE_CREDENTIALS }}'

        - name: Build image on ACR
          run:
              az acr build --image ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.PROJECT_NAME }}:${{ github.sha }} --registry ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io -g ${{ env.RESOURCE_GROUP }} .

    terraform-plan:
      runs-on: ubuntu-latest
      needs: build
      if: needs.build.outputs.iacModified == 'true'
      env:
        #this is needed since we are running terraform with read-only permissions
        ARM_SKIP_PROVIDER_REGISTRATION: true
      outputs:
        tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}
      steps:
        - name: Checkout repository
          uses: actions/checkout@v4

        # Install the latest version of the Terraform CLI
        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v3
          with:
            terraform_wrapper: false
  
        - name: Initialize Terraform
          run: terraform init
          working-directory: ./deployment/IaC
  

  

            # Generates an execution plan for Terraform
        # An exit code of 0 indicated no changes, 1 a terraform failure, 2 there are pending changes.
        - name: Terraform Plan
          id: tf-plan
          run: |
            export exitcode=0
            terraform plan -var-file="variables.tfvars" -var "storage_account_key=${{ secrets.STORAGE_ACCOUNT_KEY }}" -detailed-exitcode -no-color -out tfplan || export exitcode=$?

            echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
            
            if [ $exitcode -eq 1 ]; then
              echo Terraform Plan Failed!
              exit 1
            else 
              exit 0
            fi
          working-directory: ./deployment/IaC
  
        # Save plan to artifacts  
        - name: Publish Terraform Plan
          uses: actions/upload-artifact@v4
          with:
            name: tfplan
            path: deployment/IaC/tfplan
        
        # Create string output of Terraform Plan
        - name: Create String Output
          id: tf-plan-string
          run: |
            TERRAFORM_PLAN=$(terraform show -no-color tfplan)
            
            delimiter="$(openssl rand -hex 8)"
            echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
            echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
            echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo '```terraform' >> $GITHUB_OUTPUT
            echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
            echo '```' >> $GITHUB_OUTPUT
            echo "</details>" >> $GITHUB_OUTPUT
            echo "${delimiter}" >> $GITHUB_OUTPUT
          working-directory: ./deployment/IaC
          
      # Publish Terraform Plan as task summary
        - name: Publish Terraform Plan to Task Summary
          env:
            SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
          run: |
            echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY
  
    terraform-apply:
      name: 'Terraform Apply'
      if: github.ref == 'refs/heads/main' && needs.build.outputs.iacModified == 'true' && needs.terraform-plan.outputs.tfplanExitCode == 2
      runs-on: ubuntu-latest
      environment: production
      needs: [terraform-plan]
      
      steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4
  
      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
  
      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init
        working-directory: ./deployment/IaC
  
      # Download saved plan from artifacts  
      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan
          path: deployment/IaC
  
      # Terraform Apply
      - name: Terraform Apply
        run: terraform apply -auto-approve -var-file="variables.tfvars" -var "storage_account_key=${{ secrets.STORAGE_ACCOUNT_KEY }}"
        working-directory: ./deployment/IaC

    deploy:
        permissions:
            actions: read
            contents: read
            id-token: write
        runs-on: ubuntu-latest
        needs: [build]
        steps:
            # Checks out the repository this file is in
            - uses: actions/checkout@v4

            - name: Azure Login
              uses: azure/login@v1.4.6
              with:
                creds: '${{ secrets.AZURE_CREDENTIALS }}'

            # Use kubelogin to configure your kubeconfig for Azure auth
            - name: Set up kubelogin for non-interactive login
              uses: azure/use-kubelogin@v1
              with:
                kubelogin-version: 'v0.0.25'

          # Retrieves your Azure Kubernetes Service cluster's kubeconfig file
            - name: Get K8s context
              uses: azure/aks-set-context@v3
              with:
                resource-group: ${{ env.AKS_RESOURCE_GROUP }}
                cluster-name: ${{ env.CLUSTER_NAME }}
                admin: 'false'
                use-kubelogin: 'true'

            - name: Install Helm
              run: |
                curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
                chmod +x get_helm.sh
                ./get_helm.sh
          
            - name: Deploy application with Helm
              run: |
                helm upgrade --install sherpany ./deployment/Manifests/sherpanyChart/ --values ./deployment/Manifests/sherpanyChart/values.yaml --set djangoapp.image=${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.PROJECT_NAME }}:${{ github.sha }}
